/**
 *	\file
 */

#pragma once

#include "authenticate.hpp"
#include "error.hpp"
#include "invalidate.hpp"
#include "refresh.hpp"
#include "signout.hpp"
#include "validate.hpp"
#include <boost/expected/expected.hpp>
#include <boost/system/error_code.hpp>
#include <mcpp/buffer.hpp>
#include <cstring>
#include <istream>
#include <sstream>
#include <string>
#include <ostream>
#include <system_error>
#include <type_traits>

namespace mcpp {
namespace yggdrasil {

/**
 *	An enumeration of the errors that may occur
 *	when attempting to parse a Yggdrasil object
 *	from JSON.
 */
enum class from_json_error {
	incorrect_type,	/**<	A JSON value had an unexpected type	*/
	overflow,	/**<	A JSON value didn't fit in the target type	*/
	unexpected_key,	/**<	There was an unrecognized key in a JSON object	*/
	invalid_json,	/**<	The input is not valid JSON	*/
	incomplete,	/**<	The JSON value did not contain all expected data	*/
	duplicate_key	/**<	A JSON object contains duplicate keys	*/
};

/**
 *	Obtains a human readable string describing
 *	a \ref from_json_error enumerator.
 *
 *	\param [in] c
 *		A \ref from_json_error enumerator.
 *
 *	\return
 *		A string.
 */
const std::string & to_string (from_json_error c);

/**
 *	Obtains a `std::error_category` representing the
 *	\ref from_json_error enumeration.
 *
 *	\return
 *		An object which derives from `std::error_category`.
 */
const std::error_category & from_json_error_category ();

namespace detail {

const boost::system::error_category & from_json_boost_error_category ();

}

/**
 *	Creates a `std::error_code` from a \ref from_json_error
 *	enumerator.
 *
 *	\param [in] e
 *		A \ref from_json_error enumerator.
 *
 *	\return
 *		A `std::error_code`.
 */
std::error_code make_error_code (from_json_error e) noexcept;

/**
 *	Creates a `std::error_condition` from a
 *	\ref from_json_error enumerator.
 *
 *	\param [in] e
 *		A \ref from_json_error enumerator.
 *
 *	\return
 *		A `std::error_condition`.
 */
std::error_condition make_error_condition (from_json_error e) noexcept;

/**
 *	Serializes a Yggdrasil message to JSON and
 *	returns the result as a `std::string`.
 *
 *	\tparam Message
 *		The type of Yggdrasil message.
 *
 *	\param [in] msg
 *		The Yggdrasil message.
 *
 *	\return
 *		A string containing JSON.
 */
template <typename Message>
std::string to_json (const Message & msg) {
	std::ostringstream ss;
	to_json(msg, ss);
	return ss.str();
}

/**
 *	Serializes a \ref authenticate_request object
 *	to JSON such that it will be accepted by the
 *	Yggdrasil HTTP REST API.
 *
 *	\param [in] request
 *		The \ref authenticate_request object to
 *		serialize.
 *	\param [in] os
 *		An output stream to which the JSON representation
 *		of \em request shall be written.
 */
void to_json (const authenticate_request & request, std::ostream & os);

/**
 *	The type used to represent the result of
 *	parsing a Yggdrasil message from JSON.
 *
 *	May be an object of type \em T in which
 *	case the parse was successful and that is
 *	the object which was parsed. Otherwise is
 *	an object of type `std::error_code` which
 *	represents the failure.
 *
 *	\tparam T
 *		The type of message which is being parsed.
 */
template <typename T>
using from_json_result_type = boost::expected<T, std::error_code>;

/**
 *	Parses a \em T as represented by the Yggdrasil
 *	REST API.
 *
 *	\tparam T
 *		The type of message to parse.
 *
 *	\param [in] is
 *		A `std::istream` which manages a character
 *		sequence which is the JSON document to parse.
 *
 *	\return
 *		A \ref from_json_result_type representing the
 *		result of the operation.
 */
template <typename T>
from_json_result_type<T> from_json (std::istream & is);

/**
 *	Invoked \ref from_json with a `std::istream` which
 *	manages a character sequence which is the contents
 *	of a `std::string`.
 *
 *	\tparam T
 *		The type of Yggdrasil message to parse from
 *		JSON.
 *
 *	\param [in] str
 *		The string to parse.
 *
 *	\return
 *		An object of type \em T on success, otherwise
 *		a `std::error_code` encapsulating the failure.
 */
template <typename T>
from_json_result_type<T> from_json (const std::string & str) {
	buffer b(str.data(), str.size());
	std::istream is(&b);
	return from_json<T>(is);
}
template <typename T>
from_json_result_type<T> from_json (const char * str) {
	buffer b(str, std::strlen(str));
	std::istream is(&b);
	return from_json<T>(is);
}

template <>
from_json_result_type<authenticate_request> from_json<authenticate_request> (std::istream & is);

/**
 *	Serializes a \ref authenticate_response object
 *	to JSON such that it would be generated by
 *	the Yggdrasil REST API.
 *
 *	\param [in] response
 *		The \ref authenticate_response object to
 *		serialize.
 *	\param [in] os
 *		An output stream to which the JSON representation
 *		of \em request shall be written.
 */
void to_json (const authenticate_response & response, std::ostream & os);

template <>
from_json_result_type<authenticate_response> from_json<authenticate_response> (std::istream & is);

/**
 *	Serializes a \ref refresh_request object to
 *	JSON such that it will be accepted by the
 *	Yggdrasil REST API.
 *
 *	\param [in] request
 *		The \ref refresh_request object.
 *	\param [in] os
 *		A `std::ostream` to which JSON shall be
 *		written.
 */
void to_json (const refresh_request & request, std::ostream & os);

template <>
from_json_result_type<refresh_request> from_json<refresh_request> (std::istream & is);

/**
 *	Serializes a \ref refresh_response object to
 *	JSON such that it is represented in the manner
 *	in which it would be represented if it were
 *	returned by the Yggdrasil REST API.
 *
 *	\param [in] response
 *		The \ref refresh_response object.
 *	\param [in] os
 *		A `std::ostream` to which JSON shall be
 *		written.
 */
void to_json (const refresh_response & response, std::ostream & os);

template <>
from_json_result_type<refresh_response> from_json<refresh_response> (std::istream & is);

/**
 *	Serializes a \ref api_error object to JSON
 *	such that it is represented in the manner
 *	in which it would be represented if it were
 *	returned by the Yggdrasil REST API.
 *
 *	\param [in] e
 *		The \ref api_error object.
 *	\param [in] os
 *		A `std::ostream` to which JSON shall be
 *		written.
 */
void to_json (const api_error & e, std::ostream & os);

template <>
from_json_result_type<api_error> from_json<api_error> (std::istream & is);

/**
 *	Serializes a \ref validate_request object to
 *	JSON such that it is represented in a manner
 *	acceptable for submission to the Yggdrasil
 *	REST API.
 *
 *	\param [in] request
 *		The \ref validate_request to serialize.
 *	\param [in] os
 *		A `std::ostream` to which the JSON
 *		representation of \em request shall be
 *		written.
 */
void to_json (const validate_request & request, std::ostream & os);

template <>
from_json_result_type<validate_request> from_json<validate_request> (std::istream & is);

/**
 *	Serializes a \ref signout_request to JSON
 *	for submission to the Yggdrasil REST API.
 *
 *	\param [in] request
 *		The \ref signout_request to serialize.
 *	\param [in] os
 *		A `std::ostream` to which JSON shall be
 *		written.
 */
void to_json (const signout_request & request, std::ostream & os);

template <>
from_json_result_type<signout_request> from_json<signout_request> (std::istream & is);

/**
 *	Serializes a \ref invalidate_request to JSON
 *	for submission to the Yggdrasil REST API.
 *
 *	\param [in] request
 *		The \ref invalidate_request to serialize.
 *	\param [in] os
 *		A `std::ostream` to which JSON shall be
 *		written.
 */
void to_json (const invalidate_request & request, std::ostream & os);

template <>
from_json_result_type<invalidate_request> from_json<invalidate_request> (std::istream & is);

}
}

namespace std {

template <>
struct is_error_code_enum<mcpp::yggdrasil::from_json_error> : public std::true_type {	};
template <>
struct is_error_condition_enum<mcpp::yggdrasil::from_json_error> : public std::true_type {	};

}
